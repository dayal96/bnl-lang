
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package interpreter;

import exceptions.ArithmeticError;
import primitive.bool.MyBoolean;
import expression.lambda.FunctionCall;
import expression.lambda.Lambda;
import expression.local.*;
import primitive.number.*;
import expression.operator.number.*;
import expression.operator.*;
import expression.*;
import interpreter.*;
import java_cup.runtime.*;
import java.lang.Boolean;
import java.util.Arrays;
import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CupParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return CupParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public CupParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CupParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CupParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\003\000\002\005" +
    "\004\000\002\005\003\000\002\010\003\000\002\010\003" +
    "\000\002\006\004\000\002\003\004\000\002\003\003\000" +
    "\002\004\007\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\013\010\000\002\014\011\000\002\015\004\000" +
    "\002\015\003\000\002\016\006\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\036\004\032\005\016\011\034\017\011\020" +
    "\033\021\007\022\031\023\025\024\005\025\021\026\035" +
    "\027\004\030\030\031\022\001\002\000\042\002\uffe1\004" +
    "\uffe1\005\uffe1\011\uffe1\012\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\001\002\000\042\002\uffe4\004\uffe4\005\uffe4" +
    "\011\uffe4\012\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\001\002\000\042\002\ufffd\004\ufffd\005\ufffd\011\ufffd\012" +
    "\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd" +
    "\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\001\002\000" +
    "\042\002\uffe7\004\uffe7\005\uffe7\011\uffe7\012\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\001\002\000\040\002\000" +
    "\004\032\005\016\011\034\017\011\020\033\021\007\022" +
    "\031\023\025\024\005\025\021\026\035\027\004\030\030" +
    "\031\022\001\002\000\042\002\uffe9\004\uffe9\005\uffe9\011" +
    "\uffe9\012\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\001" +
    "\002\000\042\002\ufffe\004\ufffe\005\ufffe\011\ufffe\012\ufffe" +
    "\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025" +
    "\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\001\002\000\036" +
    "\004\ufff9\005\ufff9\011\ufff9\017\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9" +
    "\031\ufff9\001\002\000\042\002\ufff7\004\ufff7\005\ufff7\011" +
    "\ufff7\012\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7" +
    "\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\001" +
    "\002\000\042\002\ufffc\004\ufffc\005\ufffc\011\ufffc\012\ufffc" +
    "\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025" +
    "\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\001\002\000\042" +
    "\002\uffef\004\uffef\005\uffef\011\uffef\012\uffef\017\uffef\020" +
    "\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\001\002\000\036\004\032\005" +
    "\016\011\034\017\011\020\033\021\007\022\031\023\025" +
    "\024\005\025\021\026\035\027\004\030\030\031\022\001" +
    "\002\000\004\002\063\001\002\000\042\002\uffe3\004\uffe3" +
    "\005\uffe3\011\uffe3\012\uffe3\017\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3" +
    "\031\uffe3\001\002\000\042\002\ufff2\004\ufff2\005\ufff2\011" +
    "\ufff2\012\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2" +
    "\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\001" +
    "\002\000\042\002\ufff6\004\ufff6\005\ufff6\011\ufff6\012\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025" +
    "\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\001\002\000\042" +
    "\002\ufff5\004\ufff5\005\ufff5\011\ufff5\012\ufff5\017\ufff5\020" +
    "\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5" +
    "\027\ufff5\030\ufff5\031\ufff5\001\002\000\042\002\uffe5\004" +
    "\uffe5\005\uffe5\011\uffe5\012\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\001\002\000\042\002\ufff4\004\ufff4\005\ufff4" +
    "\011\ufff4\012\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\001\002\000\042\002\ufff3\004\ufff3\005\ufff3\011\ufff3\012" +
    "\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3" +
    "\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\001\002\000" +
    "\042\002\ufff1\004\ufff1\005\ufff1\011\ufff1\012\ufff1\017\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026" +
    "\ufff1\027\ufff1\030\ufff1\031\ufff1\001\002\000\042\002\uffe6" +
    "\004\uffe6\005\uffe6\011\uffe6\012\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\001\002\000\042\002\ufff0\004\ufff0\005" +
    "\ufff0\011\ufff0\012\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\001\002\000\042\002\uffe8\004\uffe8\005\uffe8\011\uffe8" +
    "\012\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\001\002" +
    "\000\044\004\032\005\016\006\040\007\037\010\041\011" +
    "\034\017\011\020\033\021\007\022\031\023\025\024\005" +
    "\025\021\026\035\027\004\030\030\031\022\001\002\000" +
    "\042\002\uffe2\004\uffe2\005\uffe2\011\uffe2\012\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\001\002\000\036\004\032" +
    "\005\016\011\034\017\011\020\033\021\007\022\031\023" +
    "\025\024\005\025\021\026\035\027\004\030\030\031\022" +
    "\001\002\000\004\031\055\001\002\000\036\004\032\005" +
    "\016\011\034\017\011\020\033\021\007\022\031\023\025" +
    "\024\005\025\021\026\035\027\004\030\030\031\022\001" +
    "\002\000\004\011\042\001\002\000\004\031\043\001\002" +
    "\000\006\012\uffeb\031\uffeb\001\002\000\006\012\046\031" +
    "\045\001\002\000\006\012\uffec\031\uffec\001\002\000\036" +
    "\004\032\005\016\011\034\017\011\020\033\021\007\022" +
    "\031\023\025\024\005\025\021\026\035\027\004\030\030" +
    "\031\022\001\002\000\004\012\050\001\002\000\042\002" +
    "\uffed\004\uffed\005\uffed\011\uffed\012\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\031\uffed\001\002\000\036\004\032\005\016" +
    "\011\034\017\011\020\033\021\007\022\031\023\025\024" +
    "\005\025\021\026\035\027\004\030\030\031\022\001\002" +
    "\000\036\004\032\005\016\011\034\017\011\020\033\021" +
    "\007\022\031\023\025\024\005\025\021\026\035\027\004" +
    "\030\030\031\022\001\002\000\004\012\054\001\002\000" +
    "\042\002\uffee\004\uffee\005\uffee\011\uffee\012\uffee\017\uffee" +
    "\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\001\002\000\036\004\032" +
    "\005\016\011\034\017\011\020\033\021\007\022\031\023" +
    "\025\024\005\025\021\026\035\027\004\030\030\031\022" +
    "\001\002\000\004\012\057\001\002\000\036\004\ufff8\005" +
    "\ufff8\011\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8" +
    "\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\001" +
    "\002\000\040\004\032\005\016\011\034\012\062\017\011" +
    "\020\033\021\007\022\031\023\025\024\005\025\021\026" +
    "\035\027\004\030\030\031\022\001\002\000\042\002\uffff" +
    "\004\uffff\005\uffff\011\uffff\012\uffff\017\uffff\020\uffff\021" +
    "\uffff\022\uffff\023\uffff\024\uffff\025\uffff\026\uffff\027\uffff" +
    "\030\uffff\031\uffff\001\002\000\042\002\uffea\004\uffea\005" +
    "\uffea\011\uffea\012\uffea\017\uffea\020\uffea\021\uffea\022\uffea" +
    "\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031" +
    "\uffea\001\002\000\004\002\001\001\002\000\036\004\ufffa" +
    "\005\ufffa\011\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023" +
    "\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\001\002\000\042\002\ufffb\004\ufffb\005\ufffb\011\ufffb\012" +
    "\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\032\002\017\003\016\004\012\005\007\006" +
    "\005\007\014\010\011\011\013\012\022\013\023\014\025" +
    "\016\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\016\004\012" +
    "\006\005\007\014\010\060\011\013\012\022\013\023\014" +
    "\025\016\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\063\007\064\011\013\012\022" +
    "\013\023\014\025\016\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\016\004\012\006\005\007" +
    "\014\010\035\011\013\012\022\013\023\014\025\016\026" +
    "\001\001\000\002\001\001\000\030\003\016\004\012\005" +
    "\057\006\005\007\014\010\011\011\013\012\022\013\023" +
    "\014\025\016\026\001\001\000\002\001\001\000\026\003" +
    "\016\004\012\006\005\007\014\010\050\011\013\012\022" +
    "\013\023\014\025\016\026\001\001\000\002\001\001\000" +
    "\004\015\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\016\004\012\006\005\007" +
    "\014\010\046\011\013\012\022\013\023\014\025\016\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\016\004\012\006\005\007\014\010\051\011\013\012\022" +
    "\013\023\014\025\016\026\001\001\000\026\003\016\004" +
    "\012\006\005\007\014\010\052\011\013\012\022\013\023" +
    "\014\025\016\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\016\004\012\006\005\007\014\010\055" +
    "\011\013\012\022\013\023\014\025\016\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\016\004\012" +
    "\006\005\007\014\010\060\011\013\012\022\013\023\014" +
    "\025\016\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CupParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CupParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CupParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CupParser$actions {



// Create a function call expression with given function name and inputs.
FunctionCall funcall(IExpression fname, List<IExpression> args) {
  return new FunctionCall(fname, args);
}

IExpression op(String opname) {
  return new Variable(opname);
}

// Create an if expression with given test and branches.
FunctionCall ifcall(IExpression test, IExpression tbranch, IExpression fbranch) {
  return funcall(op("if"), Arrays.asList(test, tbranch, fbranch));
}

// Wrap all expressions as an evaluables which can be interpreted.
List<IEvaluable> wrapAsEval(List<IExpression> e) {
  List<IEvaluable> evals = new LinkedList<IEvaluable>();
  for (IExpression expr : e) {
    evals.add(new EvaluableExpression(expr));
  }
  return evals;
}

// Parse a number as a fraction
Rational parseNumber(String number) {
  int denomStart = number.indexOf("/");

  try {
    if(denomStart >= 0) {
      int numerator = Integer.parseInt(number.substring(0, denomStart));
      int denominator = Integer.parseInt(number.substring(denomStart+1));
      return new Rational(numerator, denominator);
    }
    else {
      return new Rational(Integer.parseInt(number));
    }
  }
  catch (ArithmeticError e) {
    throw new RuntimeException("Not a valid number : { " + number + " }");
  }
}


  private final CupParser parser;

  /** Constructor */
  CUP$CupParser$actions(CupParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CupParser$do_action_part00000000(
    int                        CUP$CupParser$act_num,
    java_cup.runtime.lr_parser CUP$CupParser$parser,
    java.util.Stack            CUP$CupParser$stack,
    int                        CUP$CupParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CupParser$result;

      /* select the action based on the action number */
      switch (CUP$CupParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		List<IEvaluable> start_val = (List<IEvaluable>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		RESULT = start_val;
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CupParser$parser.done_parsing();
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= exprlist 
            {
              List<IEvaluable> RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		List<IExpression> exprs = (List<IExpression>)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = wrapAsEval(exprs); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exprlist ::= exprlist expr 
            {
              List<IExpression> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		List<IExpression> el = (List<IExpression>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 el.add(e); RESULT = el; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("exprlist",3, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exprlist ::= expr 
            {
              List<IExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 List<IExpression> el = new LinkedList<IExpression>(); el.add(e); RESULT = el; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("exprlist",3, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= localexpr 
            {
              IExpression RESULT =null;
		int lexprleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int lexprright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		IExpression lexpr = (IExpression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = lexpr; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= simplexpr 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // localexpr ::= declist simplexpr 
            {
              IExpression RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		List<LocalDefinition> dl = (List<LocalDefinition>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new Local(dl, e); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("localexpr",4, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declist ::= declist decl 
            {
              List<LocalDefinition> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		List<LocalDefinition> dl = (List<LocalDefinition>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		LocalDefinition d = (LocalDefinition)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 dl.add(d); RESULT = dl; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("declist",1, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declist ::= decl 
            {
              List<LocalDefinition> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		LocalDefinition d = (LocalDefinition)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new LinkedList<LocalDefinition>(); RESULT.add(d); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("declist",1, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl ::= OPAREN DEFINE ID expr CPAREN 
            {
              LocalDefinition RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		IExpression value = (IExpression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = new LocalDefinition(name, value); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // simplexpr ::= prim 
            {
              IExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		IExpression n = (IExpression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = n; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("simplexpr",5, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // simplexpr ::= primop 
            {
              IExpression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		IExpression op = (IExpression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = op; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("simplexpr",5, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // simplexpr ::= cond 
            {
              IExpression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = c; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("simplexpr",5, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // simplexpr ::= lambda 
            {
              IExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Lambda l = (Lambda)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = l; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("simplexpr",5, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // simplexpr ::= funcall 
            {
              IExpression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		FunctionCall f = (FunctionCall)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = f; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("simplexpr",5, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // prim ::= ID 
            {
              IExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new Variable(x); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("prim",7, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // prim ::= NUMBER 
            {
              IExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = parseNumber(n); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("prim",7, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // prim ::= FALSE 
            {
              IExpression RESULT =null;
		 RESULT = MyBoolean.FALSE; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("prim",7, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // prim ::= TRUE 
            {
              IExpression RESULT =null;
		 RESULT = MyBoolean.TRUE; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("prim",7, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cond ::= OPAREN IF expr expr expr CPAREN 
            {
              IExpression RESULT =null;
		int testleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		IExpression test = (IExpression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int tbranchleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int tbranchright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		IExpression tbranch = (IExpression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int fbranchleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int fbranchright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		IExpression fbranch = (IExpression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = ifcall(test, tbranch, fbranch); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("cond",9, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lambda ::= OPAREN LAMBDA OPAREN idlist CPAREN expr CPAREN 
            {
              Lambda RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		List<String> args = (List<String>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		IExpression body = (IExpression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = new Lambda(args, body); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("lambda",10, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-6)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // idlist ::= idlist ID 
            {
              List<String> RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		List<String> idl = (List<String>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 idl.add(id); RESULT = idl; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("idlist",11, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // idlist ::= ID 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new LinkedList<String>(); RESULT.add(id); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("idlist",11, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // funcall ::= OPAREN expr exprlist CPAREN 
            {
              FunctionCall RESULT =null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		IExpression fname = (IExpression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int fargsleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int fargsright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		List<IExpression> fargs = (List<IExpression>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT=funcall(fname, fargs); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("funcall",12, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // primop ::= PLUS 
            {
              IExpression RESULT =null;
		 RESULT = op("+"); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("primop",8, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // primop ::= MINUS 
            {
              IExpression RESULT =null;
		 RESULT = op("-"); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("primop",8, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // primop ::= MULTIPLY 
            {
              IExpression RESULT =null;
		 RESULT = op("*"); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("primop",8, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // primop ::= DIVIDE 
            {
              IExpression RESULT =null;
		 RESULT = op("/"); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("primop",8, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // primop ::= EQUALS 
            {
              IExpression RESULT =null;
		 RESULT = op("="); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("primop",8, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // primop ::= LT 
            {
              IExpression RESULT =null;
		 RESULT = op("<"); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("primop",8, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // primop ::= GT 
            {
              IExpression RESULT =null;
		 RESULT = op(">"); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("primop",8, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // primop ::= LEQ 
            {
              IExpression RESULT =null;
		 RESULT = op("<="); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("primop",8, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // primop ::= GEQ 
            {
              IExpression RESULT =null;
		 RESULT = op(">="); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("primop",8, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CupParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CupParser$do_action(
    int                        CUP$CupParser$act_num,
    java_cup.runtime.lr_parser CUP$CupParser$parser,
    java.util.Stack            CUP$CupParser$stack,
    int                        CUP$CupParser$top)
    throws java.lang.Exception
    {
              return CUP$CupParser$do_action_part00000000(
                               CUP$CupParser$act_num,
                               CUP$CupParser$parser,
                               CUP$CupParser$stack,
                               CUP$CupParser$top);
    }
}

}
